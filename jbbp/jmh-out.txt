# JMH version: 1.21
# VM version: JDK 1.8.0_171, OpenJDK 64-Bit Server VM, 25.171-b11
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.igormaznitsa.jbbp.benchmarks.JBBP_Benchmark.measureParse_Dynamic

# Run progress: 0.00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: 253.861 ops/s
# Warmup Iteration   2: 295.673 ops/s
# Warmup Iteration   3: 301.903 ops/s
# Warmup Iteration   4: 279.430 ops/s
# Warmup Iteration   5: 274.626 ops/s
Iteration   1: 276.119 ops/s
Iteration   2: 273.788 ops/s
Iteration   3: 275.381 ops/s
Iteration   4: 275.637 ops/s
Iteration   5: 275.429 ops/s

# Run progress: 6.67% complete, ETA 00:23:25
# Fork: 2 of 5
# Warmup Iteration   1: 252.298 ops/s
# Warmup Iteration   2: 275.869 ops/s
# Warmup Iteration   3: 275.478 ops/s
# Warmup Iteration   4: 275.938 ops/s
# Warmup Iteration   5: 276.014 ops/s
Iteration   1: 276.524 ops/s
Iteration   2: 275.442 ops/s
Iteration   3: 275.311 ops/s
Iteration   4: 276.102 ops/s
Iteration   5: 275.186 ops/s

# Run progress: 13.33% complete, ETA 00:21:44
# Fork: 3 of 5
# Warmup Iteration   1: 255.537 ops/s
# Warmup Iteration   2: 276.354 ops/s
# Warmup Iteration   3: 276.501 ops/s
# Warmup Iteration   4: 276.616 ops/s
# Warmup Iteration   5: 276.535 ops/s
Iteration   1: 276.152 ops/s
Iteration   2: 275.285 ops/s
Iteration   3: 275.658 ops/s
Iteration   4: 273.360 ops/s
Iteration   5: 276.010 ops/s

# Run progress: 20.00% complete, ETA 00:20:03
# Fork: 4 of 5
# Warmup Iteration   1: 254.354 ops/s
# Warmup Iteration   2: 274.160 ops/s
# Warmup Iteration   3: 273.074 ops/s
# Warmup Iteration   4: 274.918 ops/s
# Warmup Iteration   5: 274.836 ops/s
Iteration   1: 273.927 ops/s
Iteration   2: 274.602 ops/s
Iteration   3: 273.672 ops/s
Iteration   4: 273.383 ops/s
Iteration   5: 272.783 ops/s

# Run progress: 26.67% complete, ETA 00:18:23
# Fork: 5 of 5
# Warmup Iteration   1: 252.414 ops/s
# Warmup Iteration   2: 272.033 ops/s
# Warmup Iteration   3: 272.482 ops/s
# Warmup Iteration   4: 271.580 ops/s
# Warmup Iteration   5: 272.659 ops/s
Iteration   1: 271.238 ops/s
Iteration   2: 272.871 ops/s
Iteration   3: 272.429 ops/s
Iteration   4: 272.920 ops/s
Iteration   5: 271.058 ops/s


Result "com.igormaznitsa.jbbp.benchmarks.JBBP_Benchmark.measureParse_Dynamic":
  274.411 ±(99.9%) 1.184 ops/s [Average]
  (min, avg, max) = (271.058, 274.411, 276.524), stdev = 1.581
  CI (99.9%): [273.227, 275.595] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, OpenJDK 64-Bit Server VM, 25.171-b11
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.igormaznitsa.jbbp.benchmarks.JBBP_Benchmark.measureParse_DynamicAndMapping

# Run progress: 33.33% complete, ETA 00:16:42
# Fork: 1 of 5
# Warmup Iteration   1: 27.414 ops/s
# Warmup Iteration   2: 30.366 ops/s
# Warmup Iteration   3: 30.259 ops/s
# Warmup Iteration   4: 30.359 ops/s
# Warmup Iteration   5: 30.385 ops/s
Iteration   1: 30.405 ops/s
Iteration   2: 30.375 ops/s
Iteration   3: 30.329 ops/s
Iteration   4: 30.368 ops/s
Iteration   5: 30.185 ops/s

# Run progress: 40.00% complete, ETA 00:15:02
# Fork: 2 of 5
# Warmup Iteration   1: 28.311 ops/s
# Warmup Iteration   2: 30.409 ops/s
# Warmup Iteration   3: 30.490 ops/s
# Warmup Iteration   4: 30.448 ops/s
# Warmup Iteration   5: 30.476 ops/s
Iteration   1: 30.331 ops/s
Iteration   2: 30.442 ops/s
Iteration   3: 30.553 ops/s
Iteration   4: 30.308 ops/s
Iteration   5: 30.527 ops/s

# Run progress: 46.67% complete, ETA 00:13:22
# Fork: 3 of 5
# Warmup Iteration   1: 27.674 ops/s
# Warmup Iteration   2: 30.139 ops/s
# Warmup Iteration   3: 30.340 ops/s
# Warmup Iteration   4: 30.276 ops/s
# Warmup Iteration   5: 30.310 ops/s
Iteration   1: 30.222 ops/s
Iteration   2: 30.300 ops/s
Iteration   3: 30.312 ops/s
Iteration   4: 29.992 ops/s
Iteration   5: 30.457 ops/s

# Run progress: 53.33% complete, ETA 00:11:42
# Fork: 4 of 5
# Warmup Iteration   1: 27.096 ops/s
# Warmup Iteration   2: 29.808 ops/s
# Warmup Iteration   3: 29.582 ops/s
# Warmup Iteration   4: 29.560 ops/s
# Warmup Iteration   5: 29.712 ops/s
Iteration   1: 29.585 ops/s
Iteration   2: 29.732 ops/s
Iteration   3: 29.576 ops/s
Iteration   4: 29.363 ops/s
Iteration   5: 29.320 ops/s

# Run progress: 60.00% complete, ETA 00:10:01
# Fork: 5 of 5
# Warmup Iteration   1: 27.988 ops/s
# Warmup Iteration   2: 30.509 ops/s
# Warmup Iteration   3: 30.537 ops/s
# Warmup Iteration   4: 30.451 ops/s
# Warmup Iteration   5: 30.357 ops/s
Iteration   1: 30.489 ops/s
Iteration   2: 30.526 ops/s
Iteration   3: 30.487 ops/s
Iteration   4: 30.492 ops/s
Iteration   5: 30.603 ops/s


Result "com.igormaznitsa.jbbp.benchmarks.JBBP_Benchmark.measureParse_DynamicAndMapping":
  30.211 ±(99.9%) 0.288 ops/s [Average]
  (min, avg, max) = (29.320, 30.211, 30.603), stdev = 0.385
  CI (99.9%): [29.923, 30.499] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, OpenJDK 64-Bit Server VM, 25.171-b11
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.igormaznitsa.jbbp.benchmarks.JBBP_Benchmark.measureParse_Static

# Run progress: 66.67% complete, ETA 00:08:21
# Fork: 1 of 5
# Warmup Iteration   1: 1063.259 ops/s
# Warmup Iteration   2: 1269.949 ops/s
# Warmup Iteration   3: 1269.772 ops/s
# Warmup Iteration   4: 1270.375 ops/s
# Warmup Iteration   5: 1269.128 ops/s
Iteration   1: 1269.583 ops/s
Iteration   2: 1270.731 ops/s
Iteration   3: 1263.984 ops/s
Iteration   4: 1272.614 ops/s
Iteration   5: 1267.040 ops/s

# Run progress: 73.33% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 1047.850 ops/s
# Warmup Iteration   2: 1268.688 ops/s
# Warmup Iteration   3: 1273.179 ops/s
# Warmup Iteration   4: 1266.187 ops/s
# Warmup Iteration   5: 1268.685 ops/s
Iteration   1: 1268.250 ops/s
Iteration   2: 1268.068 ops/s
Iteration   3: 1260.405 ops/s
Iteration   4: 1265.569 ops/s
Iteration   5: 1267.712 ops/s

# Run progress: 80.00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 1102.378 ops/s
# Warmup Iteration   2: 1332.741 ops/s
# Warmup Iteration   3: 1330.118 ops/s
# Warmup Iteration   4: 1336.500 ops/s
# Warmup Iteration   5: 1330.740 ops/s
Iteration   1: 1321.859 ops/s
Iteration   2: 1324.094 ops/s
Iteration   3: 1323.002 ops/s
Iteration   4: 1313.323 ops/s
Iteration   5: 1317.967 ops/s

# Run progress: 86.67% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 1107.917 ops/s
# Warmup Iteration   2: 1337.675 ops/s
# Warmup Iteration   3: 1339.176 ops/s
# Warmup Iteration   4: 1340.543 ops/s
# Warmup Iteration   5: 1331.573 ops/s
Iteration   1: 1330.108 ops/s
Iteration   2: 1327.832 ops/s
Iteration   3: 1332.582 ops/s
Iteration   4: 1320.878 ops/s
Iteration   5: 1323.437 ops/s

# Run progress: 93.33% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 1003.897 ops/s
# Warmup Iteration   2: 1268.393 ops/s
# Warmup Iteration   3: 1267.284 ops/s
# Warmup Iteration   4: 1268.570 ops/s
# Warmup Iteration   5: 1269.240 ops/s
Iteration   1: 1207.571 ops/s
Iteration   2: 1212.198 ops/s
Iteration   3: 1212.710 ops/s
Iteration   4: 1212.324 ops/s
Iteration   5: 1266.934 ops/s


Result "com.igormaznitsa.jbbp.benchmarks.JBBP_Benchmark.measureParse_Static":
  1280.831 ±(99.9%) 30.589 ops/s [Average]
  (min, avg, max) = (1207.571, 1280.831, 1332.582), stdev = 40.835
  CI (99.9%): [1250.242, 1311.420] (assumes normal distribution)


# Run complete. Total time: 00:25:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt     Score    Error  Units
JBBP_Benchmark.measureParse_Dynamic            thrpt   25   274.411 ±  1.184  ops/s
JBBP_Benchmark.measureParse_DynamicAndMapping  thrpt   25    30.211 ±  0.288  ops/s
JBBP_Benchmark.measureParse_Static             thrpt   25  1280.831 ± 30.589  ops/s

Benchmark result is saved to jmh-result.json
